Installing oBB
==============

Requirements
------------
oBB requires the following software to be installed:

* Python 2.6 to 2.7 (http://www.python.org/)
* A working implementation of MPI-2 (e.g. OpenMPI, http://www.open-mpi.org/)

.. * NAG Fortran Library, tested with Mark 23 FLL6I23DCL  (http://www.nag.co.uk/)

Additionally, the following python packages should be installed (these will be installed automatically if using *pip*, see `Installation using pip (recommended)`_):

* NumPy 1.3.0 or higher (http://www.numpy.org/)
* MPI for Python 1.3 or higher (http://mpi4py.scipy.org/) 
* CVXOPT 1.1.3 or higher (http://cvxopt.org/)

Optionally, the following software may be manually installed for added functionality:

.. * SymPy 0.7.1 or higher (http://www.sympy.org/) - for automatically calculating derivatives

* matplotlib 1.1.0 or higher (http://www.matplotlib.org/) - for visualising the algorithm in 2D

Installation using *pip* (recommended)
--------------------------------------
For easy installation, use *pip*::

    $ [sudo] pip install obb

or alternatively *easy_install* (deprecated)::

    $ [sudo] easy_install obb
    
If you do not have root privileges or you want to install oBB for your private use, you can use::

    $ pip install --user obb
      
which will install oBB in your home directory.

Manual installation
-------------------
Alternatively, you can download the source code and unpack as follows::

    $ wget http://pypi.python.org/packages/source/o/obb/obb-X.X.tar.gz
    $ tar -xzvf obb-X.X.tar.gz
    $ cd obb-X.X

and then build and install manually using::

    $ python setup.py build
    $ python setup.py install

If you do not have root privileges or you want to install oBB for your private use, you can use::

    $ python setup.py install --user
    
instead.    

Uninstallation
--------------
If oBB was installed using *pip* you can uninstall as follows::

    $ [sudo] pip uninstall obb

If oBB was installed manually you have to remove the installed files by hand (located in your python site-packages directory).

.. Compiling the QP Solver Interface
   ---------------------------------
   The QP solver interface should be compiled using f2py (part of NumPy). 

   First of all, make sure f2py can find your fortran compiler. The command::

     $ f2py -c --help-fcompiler

   will list the fortran compilers available on your platform. Pick a suitable fotran compiler, e.g. intelem.

   You can then compile qpsolver.f90 using::
  
     $ f2py -c --fcompiler=intelem qpsolver.pyf -I$nag_dir/nag_interface_blocks qpsolver.f90 $nag_dir/lib/libnag_mkl.so
  
   where $nag_dir is the NAG library installation directory. See the NAG library *User's Note* for more details on compiling and linking against the NAG library.

   The QP solver with linear constraints, qpsolver_linear.f90, should be compiled similarly::

     $ f2py -c --fcompiler=intelem qpsolver_lincon.pyf -I$nag_dir/nag_interface_blocks qpsolver_lincon.f90 $nag_dir/lib/libnag_mkl.so

